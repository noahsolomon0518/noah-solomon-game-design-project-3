Tower defence

Game

    Player starts with amount of money and buys towers to defend base. Player starts on stage 1, map 1 which
    should be easiest. Goal is to prevent enemies from reaching base. Progress through all stages to get to 
    next map. 


    game.py module is brain behind game. 
        Functions:
            projectile_enemy_collisions() - Gets all of collisions and applys collision function to projectiles and enemies

Enemies
    enemy.py module controls logic behind enemies
        Global Variables:
            ENEMY_PATH_CONFIG - sets up the cordinates of the enemies path per map


    Abstract Enemy class
        Variables:
            health - how much net damage can be applied before dying
            speed - pixels per second that it travels
            destination - Where enemy is trying to get to
            direction_vector - can be up = (0,1) down = (0,-1) right = (1,0) left = (-1,0)
            projectiles_hit_by - spritelist of all the projectiles hit by


        Class Variables
            WALK_RIGHT_ANIMATION_SPRITES - Walk right textures
            WALK_LEFT_ANIMATION_SPRITES - Walk left textures
            WALK_UP_ANIMATION_SPRITES - Walk up textures
            WALK_DOWN_ANIMATION_SPRITES - Walk down textures
            START_HEALTH - starting health of enemy
            START_SPEED - starting speed of enemy
        
        Functions:
            on_collision_with_projectile(projectile) - can add logic to what happens when enemy hit by certain projectiles
            move() - moves in direction of direction_vector
            set_direction_vector() - if enemy reaches destination set next destination and new direction vector
            on_collision_with_spritelist(list)
            on_death() - controls what happens when enemy dies


Levels

    The scene module contains the specific implementations of scenes. The scenes control the actual tower defences
    game. Its responsibilities are:
        Load specific tile map
        Create GUI for various actons:
            Buy tower
            Information - money, wave, health
            Pause/quit button
        Spawn enemies
        Allow for buying towers
        Floodfill tile nodes registering enemy potential paths



    Classes:
        Level(arcade.Scene):
            Class Variables:
            
                ENEMY_PATH - the path that all enemies will travel
                TILEMAP - tilemap that is to be used
                STARTING_MONEY - amount of money that player starts with
                SPAWN_SPEED - time interval of enemy spawning
                ENEMY_SET - ordered enemy set that is to be spawned split up by stage
                PASSABLE_TILES - what tiles enemies can travel on/where towers can be be placed

            Instance variables:
                health - health that player has before loses
                stage - stage that player is on
                enemy_ind - index of enemy that currently on in stage
                passable_tiles - gets all tiles of TILE_TYPE 
                enemy_path - the path of enemies when start at spawn point



            Functions:
                on_draw() - draws everything
                draw_gui() - draws GUI
                spawn_next_wave() - spawns the next wave of enemies
                spawn_next_enemy() - spawns next enemy in stage. Is sceduled
                flood_fill() - finds tiles that are passable based on PASSABLE_TILE_TYPES. Records as TiledNode class
                get_enemy_path(passable_tiles, start_poss, end_pos) - use A* on passable tiles to return 

    GUI Classes:
        BuyTowerPanels - bottom panel that holds all the towers that can be bought

        BuyTowerPanel - button that allows player to buy tower. Has picture of tower and price
            Functions:
                on_idle() - what happens in panel default state
                on_buy() - what happens when buying tower. Instantiates preview_tower
                
        PreviewTower - Allows player to see tower location before buys it
            Instance Variables:
                net_parent - game or scene Instance
                tower - Tower class that is used
                filename - for sprite
                cost - to determine if player can buy
                


            Functions:
                on_mouse_click() - places tower down if not on path and not pressing button and if have money
                on_update() - move to x and y of mouse pointer
                draw_range() - draws range of tower continuosly
                

        QuitButton - button to quit
        InformationBox - contains values for money, stage and health
        




Game
    on game start intro screen view is revealed which are buttons for eac level. When level button is clicked view
    is displayed and that level is displayed


    classes 
        IntroScreen(view)
            instance variables 
                levels - list of the levels that user can play

            functions 
                create_play_buttons() - creates a play button for each level

Towers

    tower.py module includes a abstract tower class and full implementation of towers. Classes have adjustable
    instance variables of:
        range - Range that tower detects enemies
        cost - how much tower cost
        upgrade_stage - The level of the upgrade of tower
        game - game variable to access enemy sprite list

    Also tower abstract class has functions
        detect() - Finds enemies within range
        fire(target) - Abstract function for attacking enemy
        upgrade() - Upgrades tower to next level if possible



    There will be 2 main types of towers 
        Turret
            Shoot bullets
            Abstract class has variables of:
                speed - interval of shots
                bullet - Bullet it will shoot
                bullet_damage - damage of bullet
                bullet_speed - speed of bullet
                bullet_accuracy - accuracy of shots
        Blaster
            Continuously spray
            Instance variables of:
                damage - damage per second
                spray - sprite used for spray. !!!Need to figure this stuff out

    SimpleTurret
        Standard basic tower that slowly shoots bullets. 
        dps = 25
        cost = 100

    RapidFireTurret
        Shoots very quickly but chaotically
        dps = 50
        cost = 150

    PierceTurret
        Shoots piercing shots
        Additional instance variable:
            bullet_pierce - How many bullet pierces before breaking
        


    MissleTurret
        Shoots bombs. Splash damage
        dps = ?
        cost = 500


    BlizzardBlaster
        Slows down enemies
        dps = 0
        cost = 200    
        slow_length - how long getting sprayed slows down enemy

    LightningBlaster
        Continuously shocks enemies
        dps = 125
        cost = 300


Bullet

    bullet.py module provides all implementation of bullets
    Bullet abstract class has following variables
        game - to access sprite list
        speed - how fast bullet travels
        damage - damge of bullet
        accuracy - number from 0 - 1 that describes accuracy
        target - Enemy that bullet initialy aimed for

    Has functions
        move_to_target() - Moves in target direction at speed of <speed> and accuracy of <accuracy>
        on_target_collision() - Abstract class to handle target collision


PiercingBullet

    Extends Bullet

    New variable
        pierces - How many enemies can hit before destroyed


Missle

    Extends bullet

    on_target_collision will explode